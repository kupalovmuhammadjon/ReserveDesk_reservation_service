// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: restaurant.proto

package restaurant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RestaurantClient is the client API for Restaurant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestaurantClient interface {
	CreateRestaurant(ctx context.Context, in *RestaurantCreate, opts ...grpc.CallOption) (*Void, error)
	GetRestaurants(ctx context.Context, in *RestaurantFilter, opts ...grpc.CallOption) (*Restaurants, error)
	GetRestaurantById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RestaurantInfo, error)
	UpdateRestaurant(ctx context.Context, in *RestaurantUpdate, opts ...grpc.CallOption) (*Void, error)
	DeleteRestaurant(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
}

type restaurantClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantClient(cc grpc.ClientConnInterface) RestaurantClient {
	return &restaurantClient{cc}
}

func (c *restaurantClient) CreateRestaurant(ctx context.Context, in *RestaurantCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/restaurant.Restaurant/CreateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantClient) GetRestaurants(ctx context.Context, in *RestaurantFilter, opts ...grpc.CallOption) (*Restaurants, error) {
	out := new(Restaurants)
	err := c.cc.Invoke(ctx, "/restaurant.Restaurant/GetRestaurants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantClient) GetRestaurantById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RestaurantInfo, error) {
	out := new(RestaurantInfo)
	err := c.cc.Invoke(ctx, "/restaurant.Restaurant/GetRestaurantById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantClient) UpdateRestaurant(ctx context.Context, in *RestaurantUpdate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/restaurant.Restaurant/UpdateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantClient) DeleteRestaurant(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/restaurant.Restaurant/DeleteRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantServer is the server API for Restaurant service.
// All implementations must embed UnimplementedRestaurantServer
// for forward compatibility
type RestaurantServer interface {
	CreateRestaurant(context.Context, *RestaurantCreate) (*Void, error)
	GetRestaurants(context.Context, *RestaurantFilter) (*Restaurants, error)
	GetRestaurantById(context.Context, *Id) (*RestaurantInfo, error)
	UpdateRestaurant(context.Context, *RestaurantUpdate) (*Void, error)
	DeleteRestaurant(context.Context, *Id) (*Void, error)
	mustEmbedUnimplementedRestaurantServer()
}

// UnimplementedRestaurantServer must be embedded to have forward compatible implementations.
type UnimplementedRestaurantServer struct {
}

func (UnimplementedRestaurantServer) CreateRestaurant(context.Context, *RestaurantCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurant not implemented")
}
func (UnimplementedRestaurantServer) GetRestaurants(context.Context, *RestaurantFilter) (*Restaurants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurants not implemented")
}
func (UnimplementedRestaurantServer) GetRestaurantById(context.Context, *Id) (*RestaurantInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantById not implemented")
}
func (UnimplementedRestaurantServer) UpdateRestaurant(context.Context, *RestaurantUpdate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurant not implemented")
}
func (UnimplementedRestaurantServer) DeleteRestaurant(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestaurant not implemented")
}
func (UnimplementedRestaurantServer) mustEmbedUnimplementedRestaurantServer() {}

// UnsafeRestaurantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantServer will
// result in compilation errors.
type UnsafeRestaurantServer interface {
	mustEmbedUnimplementedRestaurantServer()
}

func RegisterRestaurantServer(s grpc.ServiceRegistrar, srv RestaurantServer) {
	s.RegisterService(&Restaurant_ServiceDesc, srv)
}

func _Restaurant_CreateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).CreateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.Restaurant/CreateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).CreateRestaurant(ctx, req.(*RestaurantCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restaurant_GetRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).GetRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.Restaurant/GetRestaurants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).GetRestaurants(ctx, req.(*RestaurantFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restaurant_GetRestaurantById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).GetRestaurantById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.Restaurant/GetRestaurantById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).GetRestaurantById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restaurant_UpdateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).UpdateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.Restaurant/UpdateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).UpdateRestaurant(ctx, req.(*RestaurantUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restaurant_DeleteRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).DeleteRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.Restaurant/DeleteRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).DeleteRestaurant(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Restaurant_ServiceDesc is the grpc.ServiceDesc for Restaurant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Restaurant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.Restaurant",
	HandlerType: (*RestaurantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRestaurant",
			Handler:    _Restaurant_CreateRestaurant_Handler,
		},
		{
			MethodName: "GetRestaurants",
			Handler:    _Restaurant_GetRestaurants_Handler,
		},
		{
			MethodName: "GetRestaurantById",
			Handler:    _Restaurant_GetRestaurantById_Handler,
		},
		{
			MethodName: "UpdateRestaurant",
			Handler:    _Restaurant_UpdateRestaurant_Handler,
		},
		{
			MethodName: "DeleteRestaurant",
			Handler:    _Restaurant_DeleteRestaurant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurant.proto",
}
